{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/gameformat\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/matchupservice\/gameformat\/init(numberofgames:deucetype:mustwinbytwo:)","title":"init(numberOfGames: NumberOfGames, deuceType: DeuceType, mustWinByTwo: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/gameformat\/deucetype","title":"var deuceType: DeuceType","type":"property"},{"path":"\/documentation\/matchupservice\/gameformat\/mustwinbytwo","title":"var mustWinByTwo: Bool","type":"property"},{"path":"\/documentation\/matchupservice\/gameformat\/numberofgames","title":"var numberOfGames: NumberOfGames","type":"property"}],"path":"\/documentation\/matchupservice\/gameformat","title":"GameFormat","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupformat\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/matchupservice\/matchupformat\/init(numberofsets:gameformat:tiebreakformat:)","title":"init(numberOfSets: NumberOfSets, gameFormat: GameFormat, tiebreakFormat: TiebreakFormat?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupformat\/gameformat","title":"var gameFormat: GameFormat","type":"property"},{"path":"\/documentation\/matchupservice\/matchupformat\/numberofsets","title":"var numberOfSets: NumberOfSets","type":"property"},{"path":"\/documentation\/matchupservice\/matchupformat\/tiebreakformat","title":"var tiebreakFormat: TiebreakFormat?","type":"property"}],"path":"\/documentation\/matchupservice\/matchupformat","title":"MatchUpFormat","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuppoint\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/matchupservice\/matchuppoint\/init(pointnumber:server:winner:winreason:pointstarttime:pointendtime:lastupdated:)","title":"init(pointNumber: Int, server: Player?, winner: Player?, winReason: PointWinReason?, pointStartTime: Date?, pointEndTime: Date?, lastUpdated: Date?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuppoint\/duration","title":"var duration: TimeInterval?","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/lastupdated","title":"var lastUpdated: Date?","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/pointendtime","title":"var pointEndTime: Date?","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/pointnumber","title":"var pointNumber: Int","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/pointstarttime","title":"var pointStartTime: Date?","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/server","title":"var server: Player?","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/winreason","title":"var winReason: PointWinReason?","type":"property"},{"path":"\/documentation\/matchupservice\/matchuppoint\/winner","title":"var winner: Player?","type":"property"}],"path":"\/documentation\/matchupservice\/matchuppoint","title":"MatchUpPoint","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/player\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/matchupservice\/player\/init(playerid:firstname:lastname:)","title":"init(playerId: String, firstName: String, lastName: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/player\/firstname","title":"var firstName: String","type":"property"},{"path":"\/documentation\/matchupservice\/player\/lastname","title":"var lastName: String?","type":"property"},{"path":"\/documentation\/matchupservice\/player\/playerid","title":"var playerId: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/player\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/player\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/player","title":"Player","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakformat\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/matchupservice\/tiebreakformat\/init(tiebreakpoints:tiebreakat:mustwinbytwo:)","title":"init(tiebreakPoints: TiebreakPoints, tiebreakAt: Int, mustWinByTwo: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakformat\/mustwinbytwo","title":"var mustWinByTwo: Bool","type":"property"},{"path":"\/documentation\/matchupservice\/tiebreakformat\/tiebreakat","title":"var tiebreakAt: Int","type":"property"},{"path":"\/documentation\/matchupservice\/tiebreakformat\/tiebreakpoints","title":"var tiebreakPoints: TiebreakPoints","type":"property"}],"path":"\/documentation\/matchupservice\/tiebreakformat","title":"TiebreakFormat","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/normaldeuce","title":"case normalDeuce","type":"case"},{"path":"\/documentation\/matchupservice\/deucetype\/onedeuce","title":"case oneDeuce","type":"case"},{"path":"\/documentation\/matchupservice\/deucetype\/suddendeath","title":"case suddenDeath","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/deucetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/deucetype\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/deucetype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/deucetype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/deucetype","title":"DeuceType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchaction\/ace(player:servetype:)","title":"case ace(player: Player, serveType: ServeType?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/doublefault(player:)","title":"case doubleFault(player: Player)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/endgame(winner:)","title":"case endGame(winner: Player)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/endmatch(winner:loser:winreason:)","title":"case endMatch(winner: Player, loser: Player, winReason: MatchUpStatus?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/endset(winner:)","title":"case endSet(winner: Player)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/endtiebreak(winner:)","title":"case endTiebreak(winner: Player)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/firstservefault(player:)","title":"case firstServeFault(player: Player)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/firstservein(player:servetype:)","title":"case firstServeIn(player: Player, serveType: ServeType?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/forcederror(player:shot:style:)","title":"case forcedError(player: Player, shot: ShotType?, style: ShotStyle?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/losepoint(player:shot:style:winreason:)","title":"case losePoint(player: Player, shot: ShotType?, style: ShotStyle?, winReason: PointWinReason?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/pausematch","title":"case pauseMatch","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/redoaction","title":"case redoAction","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/restartgame","title":"case restartGame","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/restartmatch","title":"case restartMatch","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/restartset","title":"case restartSet","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/resumematch","title":"case resumeMatch","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/secondservefault(player:)","title":"case secondServeFault(player: Player)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/secondservein(player:servetype:)","title":"case secondServeIn(player: Player, serveType: ServeType?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/servereturnerror(player:shot:style:)","title":"case serveReturnError(player: Player, shot: ShotType?, style: ShotStyle?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/servereturnwinner(player:shot:style:)","title":"case serveReturnWinner(player: Player, shot: ShotType?, style: ShotStyle?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/startmatch(player1:player2:matchformat:)","title":"case startMatch(player1: Player, player2: Player, matchFormat: MatchUpFormat)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/startnewgame","title":"case startNewGame","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/startnewset","title":"case startNewSet","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/starttiebreak","title":"case startTiebreak","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/undolastaction","title":"case undoLastAction","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/unforcederror(player:shot:style:)","title":"case unforcedError(player: Player, shot: ShotType?, style: ShotStyle?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/winpoint(player:shot:style:winreason:)","title":"case winPoint(player: Player, shot: ShotType?, style: ShotStyle?, winReason: PointWinReason?)","type":"case"},{"path":"\/documentation\/matchupservice\/matchaction\/winner(player:shot:style:)","title":"case winner(player: Player, shot: ShotType?, style: ShotStyle?)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchaction\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/matchupservice\/matchaction","title":"MatchAction","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/abandoned","title":"case abandoned","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/bye","title":"case bye","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/completed","title":"case completed","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/deadrubber","title":"case deadRubber","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/defaulted","title":"case defaulted","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/inprogress","title":"case inProgress","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/notplayed","title":"case notPlayed","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/retired","title":"case retired","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/suspended","title":"case suspended","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/tobeplayed","title":"case toBePlayed","type":"case"},{"path":"\/documentation\/matchupservice\/matchupstatus\/walkover","title":"case walkover","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/matchupservice\/matchupstatus\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/matchupstatus\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchupstatus\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/matchupstatus\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/matchupstatus\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/matchupstatus","title":"MatchUpStatus","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/doubles","title":"case doubles","type":"case"},{"path":"\/documentation\/matchupservice\/matchuptype\/singles","title":"case singles","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/matchupservice\/matchuptype\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/matchuptype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/matchuptype\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/matchuptype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/matchuptype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/matchuptype","title":"MatchUpType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/five","title":"case five","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/four","title":"case four","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/nine","title":"case nine","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/one","title":"case one","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/seven","title":"case seven","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/six","title":"case six","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/ten","title":"case ten","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/three","title":"case three","type":"case"},{"path":"\/documentation\/matchupservice\/numberofgames\/two","title":"case two","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/numberofgames\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofgames\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/numberofgames\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/numberofgames\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/numberofgames","title":"NumberOfGames","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/five","title":"case five","type":"case"},{"path":"\/documentation\/matchupservice\/numberofsets\/one","title":"case one","type":"case"},{"path":"\/documentation\/matchupservice\/numberofsets\/three","title":"case three","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/numberofsets\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/numberofsets\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/numberofsets\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/numberofsets\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/numberofsets","title":"NumberOfSets","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/ace","title":"case ace","type":"case"},{"path":"\/documentation\/matchupservice\/pointwinreason\/doublefault","title":"case doubleFault","type":"case"},{"path":"\/documentation\/matchupservice\/pointwinreason\/error","title":"case error","type":"case"},{"path":"\/documentation\/matchupservice\/pointwinreason\/forced","title":"case forced","type":"case"},{"path":"\/documentation\/matchupservice\/pointwinreason\/unforced","title":"case unforced","type":"case"},{"path":"\/documentation\/matchupservice\/pointwinreason\/winner","title":"case winner","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/matchupservice\/pointwinreason\/description","title":"var description: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/fromcode(_:)","title":"static func fromCode(String) -> PointWinReason?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/pointwinreason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/pointwinreason\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/pointwinreason\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/pointwinreason\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/pointwinreason","title":"PointWinReason","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/flat","title":"case flat","type":"case"},{"path":"\/documentation\/matchupservice\/servetype\/kick","title":"case kick","type":"case"},{"path":"\/documentation\/matchupservice\/servetype\/other","title":"case other","type":"case"},{"path":"\/documentation\/matchupservice\/servetype\/slice","title":"case slice","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/matchupservice\/servetype\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/servetype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/servetype\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/servetype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/servetype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/servetype","title":"ServeType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/dropshot","title":"case dropShot","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/groundslice","title":"case groundSlice","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/groundstroke","title":"case groundStroke","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/halfvolley","title":"case halfVolley","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/lob","title":"case lob","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/other","title":"case other","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/passingshot","title":"case passingShot","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/smash","title":"case smash","type":"case"},{"path":"\/documentation\/matchupservice\/shotstyle\/volley","title":"case volley","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/matchupservice\/shotstyle\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/shotstyle\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shotstyle\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/shotstyle\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/shotstyle\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/shotstyle","title":"ShotStyle","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/backhand","title":"case backhand","type":"case"},{"path":"\/documentation\/matchupservice\/shottype\/forehand","title":"case forehand","type":"case"},{"path":"\/documentation\/matchupservice\/shottype\/serve","title":"case serve","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/code","title":"var code: String","type":"property"},{"path":"\/documentation\/matchupservice\/shottype\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/shottype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/shottype\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/shottype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/shottype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/shottype","title":"ShotType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/eight","title":"case eight","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/five","title":"case five","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/four","title":"case four","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/nine","title":"case nine","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/one","title":"case one","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/seven","title":"case seven","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/six","title":"case six","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/ten","title":"case ten","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/three","title":"case three","type":"case"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/two","title":"case two","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/matchupservice\/tiebreakpoints\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/matchupservice\/tiebreakpoints\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/matchupservice\/tiebreakpoints\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/matchupservice\/tiebreakpoints","title":"TiebreakPoints","type":"enum"}],"path":"\/documentation\/matchupservice","title":"MatchUpService","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}